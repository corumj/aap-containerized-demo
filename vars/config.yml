---
# Path to the containerized setup file
installer_version: 2.4-1
installer_file: "{{ playbook_dir }}/ansible-automation-platform-containerized-setup-{{ installer_version }}.tar.gz"

# change these lookups to whichever SSH key you want to use to connect to the instances from your control host
public_key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"  
private_key: "{{ lookup('file', '~/.ssh/id_rsa') }}"  

# I setup the OpenEnv AWS credentials as my default in ~/.aws/credentials
aws_profile: default 
aws_region: us-east-2 

# This lets you use the staging env and swap to prod once you've customized to your env
# this makes the API gods happier
acme_env: 
  staging: https://acme-staging-v02.api.letsencrypt.org/directory
  prod: https://acme-v02.api.letsencrypt.org/directory

# This template is read in and instances are created during setup
# running the role aap_instances. 
aap_infrastructure_aws:
  instances:
    - name: "aap-controller-linux"
      group: "controller"
      short_desc: "controller"
      instance_type: "t2.large"
    - name: "test-hub-linux"
      group: "hub"
      short_desc: "automationhub"
      instance_type: "t2.large"
    - name: "test-eda-linux"
      group: "eda"
      short_desc: "edacontroller"
      instance_type: "t2.large"

# Defined AWS security group rules here.  These have evolved over time as I've 
# added ports for various demos.
####  NEED  to create an update security group playbook ####
  security_group_rules:
    - proto: tcp 
      ports:
        - 80 # HTTP
        - 443 # HTTPS
        - 22 # SSH
        - 27199 # Ansible Default Receptor Port 
        - 9092 # Kafka default port
        - 8200 # splunk HEC port  
        - 8000 # splunk demo 
        - 8089 # splunk admin port for setting up HEC
      cidr_ip: 0.0.0.0/0
    - proto: icmp
      to_port: -1
      from_port: -1
      cidr_ip: 0.0.0.0/0
    - proto: tcp
      ports: 
        - 80
        - 5986 # WinRM
        - 3389 # RDP
        - 53 # DNS
        - 88 # Kerberos Authentication
        - 135 # RPC
        - 139 # Netlogon 
        - 389 # LDAP 
        - 445 # SMB
        - 464 # Kerberos Authentication
        - 5432 # PostgreSQL
        - 636 # LDAPS (LDAP over TLS)
        - 873 # Rsync 
        - 27199 # Ansible Default Receptor Port 
        - 3268-3269 # Global Catalog 
        - 1024-65535 # Ephemeral RPC ports
      cidr_ip: 10.0.0.0/16
    - proto: udp 
      ports: 
        - 53 # DNS
        - 88 # Kerberos Authentication
        - 123 # NTP
        - 137-138 # Netlogon 
        - 389 # LDAP 
        - 445 # SMB
        - 464 # Kerberos Authentication
        - 1024-65535 # Ephemeral RPC ports
      cidr_ip: 10.0.0.0/16

# Grab the offline token from the ansible.cfg you should have setup as part of the README.md (maybe, if 
# I remembered to put that in there)

# hub_offline_token: "{{ lookup('ini', 'token section=galaxy_server.automation_hub file=ansible.cfg') }}"

# Because I might like to use jinja2 in my config files to customize them for
# their current location in AWS/GCP/Whatever, I want to be able to use
# the template module, this requires a little loop trickery in the playbook
# and if you choose to copy the config somewhere else, you'll need to change this
### I should fully parameterize this in the role as well #### 
templates_destination: /home/ec2-user/aap/config
templates_source: templates/config

